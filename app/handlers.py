from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import requests  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º requests –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤

from config import API_key
from .FSM import Weather

router = Router()

@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer_photo(photo='AgACAgIAAxkBAAMCZ5ETn-c6RiYq7kYAAfM2kbIxwr_6AAKO6jEb41GJSGS41lDGLBTQAQADAgADeQADNgQ',
                               caption='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ‚úã\n–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å? üòä')
    await state.set_state(Weather.city)

@router.message(Weather.city)
async def weather(message: Message, state: FSMContext):
    city_name = message.text
    response_k = f'https://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={API_key}&units=metric'

    try:
        response = requests.get(response_k)
        data = response.json()

        if response.status_code == 200:
            temperature = data['main']['temp']
            await message.answer(f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_name} —Å–µ–π—á–∞—Å {temperature}¬∞C')
        else:
            await message.answer(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.')
    except Exception as e:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')

    await state.clear()